"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _makePlural = _interopRequireDefault(require("make-plural"));

var _pluralCategories = _interopRequireDefault(require("make-plural/umd/pluralCategories"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// does not check for duplicate subtags
var isStructurallyValidLanguageTag = function isStructurallyValidLanguageTag(locale) {
  return locale.split('-').every(function (subtag) {
    return /[a-z0-9]+/i.test(subtag);
  });
};

var canonicalizeLocaleList = function canonicalizeLocaleList(locales) {
  if (!locales) return [];
  if (!Array.isArray(locales)) locales = [locales];
  var res = {};

  for (var i = 0; i < locales.length; ++i) {
    var tag = locales[i];
    if (tag && _typeof(tag) === 'object') tag = String(tag);

    if (typeof tag !== 'string') {
      // Requiring tag to be a String or Object means that the Number value
      // NaN will not be interpreted as the language tag "nan", which stands
      // for Min Nan Chinese.
      var msg = "Locales should be strings, ".concat(JSON.stringify(tag), " isn't.");
      throw new TypeError(msg);
    }

    if (tag[0] === '*') continue;

    if (!isStructurallyValidLanguageTag(tag)) {
      var strTag = JSON.stringify(tag);

      var _msg = "The locale ".concat(strTag, " is not a structurally valid BCP 47 language tag.");

      throw new RangeError(_msg);
    }

    res[tag] = true;
  }

  return Object.keys(res);
};

var defaultLocale = function defaultLocale() {
  return typeof navigator !== 'undefined' && navigator && (navigator.userLanguage || navigator.language) || 'en-US';
};

var findLocale = function findLocale(locale) {
  do {
    if (_makePlural.default[locale]) return locale;
    locale = locale.replace(/-?[^-]*$/, '');
  } while (locale);

  return null;
};

var resolveLocale = function resolveLocale(locales) {
  var canonicalLocales = canonicalizeLocaleList(locales);

  for (var i = 0; i < canonicalLocales.length; ++i) {
    var lc = findLocale(canonicalLocales[i]);
    if (lc) return lc;
  }

  return findLocale(defaultLocale());
};

var getType = function getType(type) {
  if (!type) return 'cardinal';
  if (type === 'cardinal' || type === 'ordinal') return type;
  throw new RangeError('Not a valid plural type: ' + JSON.stringify(type));
};

var PluralRules =
/*#__PURE__*/
function () {
  _createClass(PluralRules, null, [{
    key: "supportedLocalesOf",
    value: function supportedLocalesOf(locales) {
      return canonicalizeLocaleList(locales).filter(findLocale);
    }
  }]);

  function PluralRules(locales) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, PluralRules);

    this._locale = resolveLocale(locales);
    this._type = getType(opt.type);

    if ((typeof Intl === "undefined" ? "undefined" : _typeof(Intl)) === 'object' && Intl.NumberFormat) {
      // make-plural expects latin digits with . decimal separator
      this._nf = new Intl.NumberFormat('en', opt);
    } else {
      var minID = opt.minimumIntegerDigits,
          minFD = opt.minimumFractionDigits,
          maxFD = opt.maximumFractionDigits,
          minSD = opt.minimumSignificantDigits,
          maxSD = opt.maximumSignificantDigits;
      this._minID = typeof minID === 'number' ? minID : 1;
      this._minFD = typeof minFD === 'number' ? minFD : 0;
      this._maxFD = typeof maxFD === 'number' ? maxFD : Math.max(this._minFD, 3);

      if (typeof minSD === 'number' || typeof maxSD === 'number') {
        this._minSD = typeof minSD === 'number' ? minSD : 1;
        this._maxSD = typeof maxSD === 'number' ? maxSD : 21;
      }
    }
  }

  _createClass(PluralRules, [{
    key: "resolvedOptions",
    value: function resolvedOptions() {
      var nfOpt = this._nf && this._nf.resolvedOptions();

      var opt = {
        locale: this._locale,
        minimumIntegerDigits: nfOpt ? nfOpt.minimumIntegerDigits : this._minID,
        minimumFractionDigits: nfOpt ? nfOpt.minimumFractionDigits : this._minFD,
        maximumFractionDigits: nfOpt ? nfOpt.maximumFractionDigits : this._maxFD,
        pluralCategories: _pluralCategories.default[this._locale][this._type],
        type: this._type
      };

      if (nfOpt && typeof nfOpt.minimumSignificantDigits === 'number') {
        opt.minimumSignificantDigits = nfOpt.minimumSignificantDigits;
        opt.maximumSignificantDigits = nfOpt.maximumSignificantDigits;
      } else if (typeof this._minSD === 'number') {
        opt.minimumSignificantDigits = this._minSD;
        opt.maximumSignificantDigits = this._maxSD;
      }

      return opt;
    }
  }, {
    key: "_format",
    value: function _format(n) {
      if (this._nf) return this._nf.format(n);

      if (this._minSD) {
        var raw = String(n);
        var prec = 0;

        for (var i = 0; i < raw.length; ++i) {
          var c = raw[i];
          if (c >= '0' && c <= '9') ++prec;
        }

        if (prec < this._minSD) return n.toPrecision(this._minSD);
        if (prec > this._maxSD) return n.toPrecision(this._maxSD);
        return raw;
      }

      if (this._minFD > 0) return n.toFixed(this._minFD);
      if (this._maxFD === 0) return n.toFixed(0);
      return String(n);
    }
  }, {
    key: "select",
    value: function select(number) {
      if (typeof number !== 'number') number = Number(number);
      if (!isFinite(number)) return 'other';

      var fmt = this._format(Math.abs(number));

      return _makePlural.default[this._locale](fmt, this._type === 'ordinal');
    }
  }]);

  return PluralRules;
}();

exports.default = PluralRules;